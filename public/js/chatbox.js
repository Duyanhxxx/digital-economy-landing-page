// AI Chatbox Handler cho √ù Th·ª©c X√£ H·ªôi S·ªë
class ChatboxHandler {
    constructor() {
        this.apiKey = import.meta.env.VITE_GEMINI_API_KEY;
        this.model = import.meta.env.VITE_GEMINI_MODEL || 'gemini-2.0-flash';
        this.isOpen = false;
        this.isTyping = false;
        
        // Initialize elements
        this.chatbox = document.getElementById('ai-chatbox');
        this.toggle = document.getElementById('chatbox-toggle');
        this.closeBtn = document.getElementById('chatbox-close');
        this.messages = document.getElementById('chatbox-messages');
        this.input = document.getElementById('chatbox-input-field');
        this.sendBtn = document.getElementById('chatbox-send');
        
        // Define relevant topics
        this.relevantTopics = [
            // M√¥n h·ªçc li√™n quan
            '√Ω th·ª©c x√£ h·ªôi', 'tri·∫øt h·ªçc', 'ch√≠nh tr·ªã', 'x√£ h·ªôi h·ªçc', 't√¢m l√Ω h·ªçc x√£ h·ªôi',
            'truy·ªÅn th√¥ng', 'm·∫°ng x√£ h·ªôi', 'th√¥ng tin', 'tin gi·∫£', 'fake news',
            'thu·∫≠t to√°n', 'algorithm', 'c√¥ng ngh·ªá', 's·ªë h√≥a', 'digital',
            't∆∞ duy ph·∫£n bi·ªán', 'critical thinking', 'ph√¢n t√≠ch', 'ƒë√°nh gi√°',
            'xu h∆∞·ªõng', 'trend', 'viral', '·∫£nh h∆∞·ªüng x√£ h·ªôi', 'd∆∞ lu·∫≠n',
            'quy·ªÅn l·ª±c', 'thao t√∫ng', 'propaganda', 'ideology', '√Ω th·ª©c h·ªá',
            'vƒÉn h√≥a', 'gi√° tr·ªã', 'chu·∫©n m·ª±c', 'ƒë·∫°o ƒë·ª©c', 'ethics',
            'sinh vi√™n', 'gi√°o d·ª•c', 'h·ªçc t·∫≠p', 'nghi√™n c·ª©u',
            'c·ªông ƒë·ªìng', 'x√£ h·ªôi', 't·∫≠p th·ªÉ', 'c√° nh√¢n',
            'th·ª±c t·∫ø', '·∫£o t∆∞·ªüng', 'nh·∫≠n th·ª©c', '√Ω th·ª©c',
            'marx', 'marxism', 'h·∫° t·∫ßng', 'th∆∞·ª£ng t·∫ßng', 'kinh t·∫ø ch√≠nh tr·ªã',
            'd√¢n ch·ªß', 't·ª± do', 'nh√¢n quy·ªÅn', 'c√¥ng b·∫±ng x√£ h·ªôi',
            'to√†n c·∫ßu h√≥a', 'hi·ªán ƒë·∫°i h√≥a', 'ph√°t tri·ªÉn b·ªÅn v·ªØng'
        ];
        
        this.init();
        
        // Check API key
        if (!this.apiKey) {
            console.warn('API key not found. Using demo mode.');
        } else {
            console.log('API key found, will attempt to use Gemini API');
        }
    }

    init() {
        // Use setTimeout to ensure DOM elements are available
        setTimeout(() => {
            this.initializeEventListeners();
            this.setupAIResponses();
        }, 50);
    }

    initializeEventListeners() {
        console.log('Setting up chatbox listeners:', { 
            toggle: this.toggle, 
            closeBtn: this.closeBtn, 
            sendBtn: this.sendBtn, 
            input: this.input 
        });

        if (this.toggle) {
            this.toggle.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleChatbox();
            });
        }

        if (this.closeBtn) {
            this.closeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.closeChatbox();
            });
        }

        if (this.sendBtn) {
            this.sendBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.sendMessage();
            });
        }

        if (this.input) {
            this.input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }
    }

    toggleChatbox() {
        if (this.isOpen) {
            this.closeChatbox();
        } else {
            this.openChatbox();
        }
    }
    
    openChatbox() {
        this.isOpen = true;
        if (this.chatbox) {
            this.chatbox.classList.add('active');
            setTimeout(() => {
                if (this.input) this.input.focus();
            }, 300);
        }
    }

    closeChatbox() {
        this.isOpen = false;
        if (this.chatbox) {
            this.chatbox.classList.remove('active');
        }
    }

    // Check if message is relevant to academic topics
    isRelevantTopic(message) {
        const lowerMessage = message.toLowerCase();
        
        // Check if message contains any relevant keywords
        const hasRelevantKeyword = this.relevantTopics.some(topic => 
            lowerMessage.includes(topic.toLowerCase())
        );
        
        // Additional context checks
        const academicContexts = [
            'm√¥n h·ªçc', 'b√†i t·∫≠p', 'nghi√™n c·ª©u', 'lu·∫≠n vƒÉn', 'b√°o c√°o',
            'ph√¢n t√≠ch', 'ƒë√°nh gi√°', 'so s√°nh', 'gi·∫£i th√≠ch', 't·∫°i sao',
            'nh∆∞ th·∫ø n√†o', '·∫£nh h∆∞·ªüng', 't√°c ƒë·ªông', 'nguy√™n nh√¢n', 'h·∫≠u qu·∫£',
            'quan ƒëi·ªÉm', 'l√Ω thuy·∫øt', 'kh√°i ni·ªám', 'ƒë·ªãnh nghƒ©a'
        ];
        
        const hasAcademicContext = academicContexts.some(context => 
            lowerMessage.includes(context)
        );
        
        return hasRelevantKeyword || hasAcademicContext;
    }

    async sendMessage() {
        const message = this.input?.value.trim();
        if (!message || this.isTyping) return;

        this.addMessage(message, 'user');
        this.input.value = '';
        this.showTyping();

        try {
            let response;
            if (this.apiKey) {
                response = await this.callGeminiAPI(message);
            } else {
                response = this.getDemoResponse(message);
            }
            this.hideTyping();
            this.addMessage(response, 'ai');
        } catch (error) {
            console.error('Error getting AI response:', error);
            this.hideTyping();
            const fallbackResponse = this.getDemoResponse(message);
            this.addMessage(fallbackResponse, 'ai');
        }
    }

    getOffTopicResponse() {
        const responses = [
            `Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:

üìö **M√¥n h·ªçc**: √ù th·ª©c x√£ h·ªôi, tri·∫øt h·ªçc, ch√≠nh tr·ªã h·ªçc, x√£ h·ªôi h·ªçc
üß† **Ch·ªß ƒë·ªÅ ch√≠nh**: 
- √ù th·ª©c x√£ h·ªôi trong th·ªùi ƒë·∫°i s·ªë
- T√°c ƒë·ªông c·ªßa m·∫°ng x√£ h·ªôi ƒë·∫øn t∆∞ duy
- T∆∞ duy ph·∫£n bi·ªán v√† ph√¢n t√≠ch th√¥ng tin
- Tri·∫øt h·ªçc ch√≠nh tr·ªã v√† x√£ h·ªôi

B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i v·ªÅ nh·ªØng ch·ªß ƒë·ªÅ n√†y kh√¥ng?`,

            `T√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h·ªó tr·ª£ h·ªçc t·∫≠p v·ªÅ **√Ω th·ª©c x√£ h·ªôi trong b·ªëi c·∫£nh s·ªë** v√† c√°c m√¥n h·ªçc li√™n quan nh∆∞ tri·∫øt h·ªçc, ch√≠nh tr·ªã h·ªçc.

H√£y h·ªèi t√¥i v·ªÅ:
- C√°ch ph√¢n t√≠ch xu h∆∞·ªõng x√£ h·ªôi
- L√Ω thuy·∫øt tri·∫øt h·ªçc v·ªÅ √Ω th·ª©c
- T√°c ƒë·ªông ch√≠nh tr·ªã c·ªßa c√¥ng ngh·ªá s·ªë
- Ph∆∞∆°ng ph√°p nghi√™n c·ª©u x√£ h·ªôi h·ªçc

B·∫°n mu·ªën t√¨m hi·ªÉu ƒëi·ªÅu g√¨ trong nh·ªØng lƒ©nh v·ª±c n√†y?`,

            `C√¢u h·ªèi c·ªßa b·∫°n n·∫±m ngo√†i ph·∫°m vi chuy√™n m√¥n c·ªßa t√¥i. 

T√¥i ch·ªâ h·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ h·ªçc thu·∫≠t v·ªÅ:
üîç Ph√¢n t√≠ch √Ω th·ª©c x√£ h·ªôi
üì± T√°c ƒë·ªông c·ªßa c√¥ng ngh·ªá s·ªë
ü§î Tri·∫øt h·ªçc v√† t∆∞ duy ph·∫£n bi·ªán  
üèõÔ∏è Ch√≠nh tr·ªã h·ªçc v√† quy·ªÅn l·ª±c

B·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c v·ªÅ nh·ªØng ch·ªß ƒë·ªÅ n√†y kh√¥ng?`
        ];
        
        return responses[Math.floor(Math.random() * responses.length)];
    }

    async callGeminiAPI(message) {
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${this.model}:generateContent?key=${this.apiKey}`;
        
        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia tri·∫øt h·ªçc, c√≥ ki·∫øn th·ª©c s√¢u v·ªÅ √Ω th·ª©c x√£ h·ªôi v√† ch√≠nh tr·ªã trong th·ªùi ƒë·∫°i s·ªë.

Nhi·ªám v·ª•: Tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát, theo g√≥c nh√¨n tri·∫øt h·ªçc-x√£ h·ªôi, r√µ r√†ng v√† ng·∫Øn g·ªçn (t·ªëi ƒëa 250 t·ª´). 
- N√™u lu·∫≠n ƒëi·ªÉm ch√≠nh v√† l√Ω thuy·∫øt li√™n quan (v√≠ d·ª•: Marx, Foucault, Habermas, Kant...).
- Li√™n h·ªá b·ªëi c·∫£nh c√¥ng ngh·ªá s·ªë v√† t√°c ƒë·ªông x√£ h·ªôi.
- ƒê·ªÅ xu·∫•t c√°ch t∆∞ duy/ph·∫£n bi·ªán ho·∫∑c h√†nh ƒë·ªông c√≥ tr√°ch nhi·ªám.

N·∫øu c√¢u h·ªèi kh√¥ng tr·ª±c ti·∫øp thu·ªôc ph·∫°m vi, h√£y t√°i di·ªÖn d·ªãch n√≥ t·ª´ g√≥c nh√¨n tri·∫øt h·ªçc v√† cung c·∫•p ph√¢n t√≠ch li√™n quan, kh√¥ng t·ª´ ch·ªëi.

C√¢u h·ªèi: ${message}`;

        const requestBody = {
            contents: [{
                parts: [{
                    text: prompt
                }]
            }],
            generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 350,
            }
        };

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            return data.candidates[0].content.parts[0].text;
        } else {
            throw new Error('Invalid API response format');
        }
    }

    getDemoResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // Responses about fake news and information analysis
        if (lowerMessage.includes('tin gi·∫£') || lowerMessage.includes('fake news') || lowerMessage.includes('th√¥ng tin sai')) {
            return `**Ph√¢n t√≠ch tin gi·∫£ t·ª´ g√≥c ƒë·ªô tri·∫øt h·ªçc nh·∫≠n th·ª©c:**

üîç **B·∫£n ch·∫•t nh·∫≠n th·ª©c**: Tin gi·∫£ khai th√°c khuynh h∆∞·ªõng x√°c nh·∫≠n (confirmation bias) - con ng∆∞·ªùi c√≥ xu h∆∞·ªõng tin nh·ªØng th√¥ng tin ph√π h·ª£p v·ªõi quan ƒëi·ªÉm c√≥ s·∫µn.

üìö **Ph∆∞∆°ng ph√°p lu·∫≠n**:
- **Nghi ng·ªù c√≥ ph∆∞∆°ng ph√°p** (Descartes): ƒê·∫∑t c√¢u h·ªèi v·ªÅ m·ªçi th√¥ng tin
- **Ki·ªÉm ch·ª©ng th·ª±c nghi·ªám**: T√¨m b·∫±ng ch·ª©ng c·ª• th·ªÉ, c√≥ th·ªÉ ƒëo l∆∞·ªùng
- **ƒê·ªëi tho·∫°i Socrates**: ƒê·∫∑t c√¢u h·ªèi li√™n ti·∫øp ƒë·ªÉ kh√°m ph√°a s·ª± th·∫≠t

üèõÔ∏è **G√≥c ƒë·ªô ch√≠nh tr·ªã**: Tin gi·∫£ l√† c√¥ng c·ª• quy·ªÅn l·ª±c ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng d∆∞ lu·∫≠n, t·∫°o ra "s·ª± th·∫≠t" ph·ª•c v·ª• l·ª£i √≠ch nh√≥m.`;
        }
        
        // Responses about algorithms and social media from political perspective
        if (lowerMessage.includes('thu·∫≠t to√°n') || lowerMessage.includes('algorithm') || lowerMessage.includes('m·∫°ng x√£ h·ªôi')) {
            return `**Thu·∫≠t to√°n m·∫°ng x√£ h·ªôi: Ph√¢n t√≠ch ch√≠nh tr·ªã h·ªçc**

üèõÔ∏è **Quy·ªÅn l·ª±c s·ªë**: Thu·∫≠t to√°n l√† h√¨nh th·ª©c quy·ªÅn l·ª±c m·ªõi - "algorithmic governance" (Foucault hi·ªán ƒë·∫°i)

üìä **C∆° ch·∫ø ho·∫°t ƒë·ªông**:
- **Panopticon s·ªë**: Gi√°m s√°t h√†nh vi kh√¥ng ng∆∞·ªùi d√πng nh·∫≠n ra
- **Hegemony vƒÉn h√≥a** (Gramsci): T·∫°o ƒë·ªìng thu·∫≠n qua n·ªôi dung ƒë∆∞·ªùng ƒë·ªÉ l·ª±a ch·ªçn
- **Bong b√≥ng th√¥ng tin**: Chia r·∫Ω x√£ h·ªôi th√†nh c√°c nh√≥m t√°ch bi·ªát

ü§î **Tri·∫øt h·ªçc**: Thu·∫≠t to√°n ƒë·∫∑t ra c√¢u h·ªèi v·ªÅ t·ª± do √Ω ch√≠ - li·ªáu ch√∫ng ta c√≥ th·ª±c s·ª± t·ª± do l·ª±a ch·ªçn khi suy nghƒ©ng?

**√ù nghƒ©a ch√≠nh tr·ªã**: Ai ki·ªÉm so√°t thu·∫≠t to√°n s·∫Ω ki·ªÉm so√°t √Ω th·ª©c x√£ h·ªôi.`;
        }
        
        // Responses about critical thinking from philosophical perspective
        if (lowerMessage.includes('t∆∞ duy ph·∫£n bi·ªán') || lowerMessage.includes('ph√¢n t√≠ch') || lowerMessage.includes('critical thinking')) {
            return `**T∆∞ duy ph·∫£n bi·ªán: N·ªÅn t·∫£ng tri·∫øt h·ªçc**

üß† **Kant v√† "Sapere aude!"**: "H√£y d√°m s·ª≠ d·ª•ng l√Ω tr√≠ c·ªßa ch√≠nh m√¨nh"

üìö **Ph∆∞∆°ng ph√°p tri·∫øt h·ªçc**:
- **Bi·ªán ch·ª©ng** (Hegel): Thesis ‚Üí Antithesis ‚Üí Synthesis
- **Hi·ªán t∆∞·ª£ng h·ªçc** (Husserl): "ƒê·∫∑t trong ngo·∫∑c" c√°c ƒë·ªãnh ki·∫øn
- **Hermeneutics**: Hi·ªÉu nghƒ©a trong b·ªëi c·∫£nh

üîç **·ª®ng d·ª•ng th·ª±c t·∫ø**:
1. **Ph√¢n t√≠ch ng√¥n ng·ªØ**: T·ª´ ng·ªØ n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng? T·∫°i sao?
2. **T√¨m hi·ªÉu b·ªëi c·∫£nh**: Ai n√≥i? Khi n√†o? V√¨ m·ª•c ƒë√≠ch g√¨?
3. **ƒê·ªëi chi·∫øu quan ƒëi·ªÉm**: C√≥ ti·∫øng n√≥i ƒë·ªëi l·∫≠p n√†o kh√¥ng?
4. **Ph·∫£n t∆∞ v·ªÅ b·∫£n th√¢n**: T√¥i c√≥ ƒë·ªãnh ki·∫øn g√¨ kh√¥ng?

**M·ª•c ti√™u**: ƒê·∫°t ƒë∆∞·ª£c "epoch√©" - tr·∫°ng th√°i treo l∆° l·ª≠ng ph√°n ƒëo√°n ƒë·ªÉ nh√¨n nh·∫≠n kh√°ch quan.`;
        }
        
        // Responses about social consciousness from Marxist perspective
        if (lowerMessage.includes('√Ω th·ª©c x√£ h·ªôi') || lowerMessage.includes('√Ω th·ª©c h·ªá') || lowerMessage.includes('ideology')) {
            return `**√ù th·ª©c x√£ h·ªôi: Ph√¢n t√≠ch Marxist**

üè≠ **Marx v√† √Ω th·ª©c x√£ h·ªôi**:
- "T·ªìn t·∫°i x√£ h·ªôi quy·∫øt ƒë·ªãnh √Ω th·ª©c x√£ h·ªôi"
- √ù th·ª©c l√† s·∫£n ph·∫©m c·ªßa ƒëi·ªÅu ki·ªán v·∫≠t ch·∫•t

üì± **Trong th·ªùi ƒë·∫°i s·ªë**:
- **H·∫° t·∫ßng m·ªõi**: N·ªÅn t·∫£ng c√¥ng ngh·ªá, thu·∫≠t to√°n
- **Th∆∞·ª£ng t·∫ßng m·ªõi**: VƒÉn h√≥a m·∫°ng, gi√° tr·ªã s·ªë

ü§î **C√¢u h·ªèi tri·∫øt h·ªçc**: Li·ªáu √Ω th·ª©c s·ªë c√≥ c√≤n ph·∫£n √°nh th·ª±c t·∫°i hay ƒë√£ tr·ªü th√†nh "√Ω th·ª©c gi·∫£ t·∫°o" (false consciousness)?

üîÑ **M·ªëi quan h·ªá bi·ªán ch·ª©ng**:
- C√¥ng ngh·ªá ƒë·ªãnh h√¨nh √Ω th·ª©c
- √ù th·ª©c l·∫°i t√°c ƒë·ªông ng∆∞·ª£c l·∫°i c√¥ng ngh·ªá
- T·∫°o ra chu tr√¨nh ph·∫£n h·ªìi ph·ª©c t·∫°p

**K·∫øt lu·∫≠n**: C·∫ßn ph√¢n bi·ªát √Ω th·ª©c "t·ª± ph√°t" v√† √Ω th·ª©c "ƒë∆∞·ª£c s·∫£n xu·∫•t" b·ªüi c√°c l·ª±c l∆∞·ª£ng kinh t·∫ø-ch√≠nh tr·ªã.`;
        }
        
        // Responses about power and manipulation
        if (lowerMessage.includes('quy·ªÅn l·ª±c') || lowerMessage.includes('thao t√∫ng') || lowerMessage.includes('propaganda')) {
            return `**Quy·ªÅn l·ª±c v√† thao t√∫ng trong th·ªùi ƒë·∫°i s·ªë**

üèõÔ∏è **Foucault v√† quy·ªÅn l·ª±c**:
- Quy·ªÅn l·ª±c kh√¥ng ch·ªâ l√† √°p b·ª©c m√† c√≤n l√† "s·∫£n xu·∫•t" tri th·ª©c
- "Biopower": Ki·ªÉm so√°t qua d·ªØ li·ªáu v√† thu·∫≠t to√°n

üìä **C√°c h√¨nh th·ª©c thao t√∫ng**:
- **Soft power**: ·∫¢nh h∆∞·ªüng qua vƒÉn h√≥a, gi·∫£i tr√≠
- **Astroturfing**: T·∫°o ra phong tr√†o "c·ªè r·ªÖ" gi·∫£
- **Gaslighting t·∫≠p th·ªÉ**: L√†m x√£ h·ªôi nghi ng·ªù nh·∫≠n th·ª©c c·ªßa ch√≠nh m√¨nh

üß† **Chomsky v√† "Manufacturing Consent"**:
- Truy·ªÅn th√¥ng t·∫°o ra s·ª± ƒë·ªìng thu·∫≠n
- 5 b·ªô l·ªçc th√¥ng tin trong x√£ h·ªôi

**Ph√≤ng ch·ªëng**: Ph√°t tri·ªÉn "√Ω th·ª©c giai c·∫•p" m·ªõi - nh·∫≠n th·ª©c v·ªÅ c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa quy·ªÅn l·ª±c s·ªë.`;
        }
        
        // Responses about education and research methodology
        if (lowerMessage.includes('nghi√™n c·ª©u') || lowerMessage.includes('ph∆∞∆°ng ph√°p') || lowerMessage.includes('h·ªçc thu·∫≠t')) {
            return `**Ph∆∞∆°ng ph√°p nghi√™n c·ª©u √Ω th·ª©c x√£ h·ªôi s·ªë**

üìö **ƒêa ng√†nh t√≠ch h·ª£p**:
- **X√£ h·ªôi h·ªçc**: Kh·∫£o s√°t, ph·ªèng v·∫•n v·ªÅ h√†nh vi s·ªë
- **T√¢m l√Ω h·ªçc**: Nghi√™n c·ª©u t√°c ƒë·ªông nh·∫≠n th·ª©c
- **Ch√≠nh tr·ªã h·ªçc**: Ph√¢n t√≠ch quy·ªÅn l·ª±c v√† ·∫£nh h∆∞·ªüng
- **Tri·∫øt h·ªçc**: Ph·∫£n t∆∞ v·ªÅ b·∫£n ch·∫•t v√† √Ω nghƒ©a

üîç **Ph∆∞∆°ng ph√°p c·ª• th·ªÉ**:
- **Ethnography s·ªë**: Quan s√°t tham gia trong c·ªông ƒë·ªìng online
- **Ph√¢n t√≠ch di·ªÖn ng√¥n**: Nghi√™n c·ª©u ng√¥n ng·ªØ v√† √Ω nghƒ©a
- **Big data analysis**: Ph√¢n t√≠ch xu h∆∞·ªõng quy m√¥ l·ªõn
- **Phenomenology**: Nghi√™n c·ª©u tr·∫£i nghi·ªám ch·ªß quan

üìä **Th√°ch th·ª©c ƒë·∫°o ƒë·ª©c**:
- Quy·ªÅn ri√™ng t∆∞ vs nghi√™n c·ª©u
- T√≠nh kh√°ch quan trong m√¥i tr∆∞·ªùng b·ªã thu·∫≠t to√°n ƒë·ªãnh h∆∞·ªõng
- Tr√°ch nhi·ªám c·ªßa nh√† nghi√™n c·ª©u v·ªõi x√£ h·ªôi`;
        }
        
        // Responses about Vietnamese context and students
        if (lowerMessage.includes('sinh vi√™n') || lowerMessage.includes('vi·ªát nam') || lowerMessage.includes('gi√°o d·ª•c')) {
            return `**√ù th·ª©c x√£ h·ªôi s·ªë trong b·ªëi c·∫£nh Vi·ªát Nam**

üáªüá≥ **ƒê·∫∑c th√π vƒÉn h√≥a**:
- **T·∫≠p th·ªÉ vs c√° nh√¢n**: M·∫°ng x√£ h·ªôi tƒÉng c∆∞·ªùng c√° nh√¢n h√≥a
- **T√¥n tr·ªçng th·∫ßy c√¥ vs t∆∞ duy ƒë·ªôc l·∫≠p**: C·∫ßn c√¢n b·∫±ng
- **Truy·ªÅn th·ªëng vs hi·ªán ƒë·∫°i**: Xung ƒë·ªôt gi√° tr·ªã

üìö **Th√°ch th·ª©c gi√°o d·ª•c**:
- T·ª´ "h·ªçc thu·ªôc l√≤ng" sang "t∆∞ duy ph·∫£n bi·ªán"
- Ph√°t tri·ªÉn kh·∫£ nƒÉng ph√¢n t√≠ch th√¥ng tin
- Gi·ªØ g√¨n b·∫£n s·∫Øc trong to√†n c·∫ßu h√≥a s·ªë

üéØ **M·ª•c ti√™u cho sinh vi√™n**:
- **√ù th·ª©c ph√™ ph√°n**: Kh√¥ng ti·∫øp nh·∫≠n th√¥ng tin m·ªôt c√°ch th·ª• ƒë·ªông
- **Tr√°ch nhi·ªám x√£ h·ªôi**: S·ª≠ d·ª•ng c√¥ng ngh·ªá c√≥ √Ω th·ª©c
- **C√¢n b·∫±ng**: H∆∞·ªüng l·ª£i t·ª´ c√¥ng ngh·ªá nh∆∞ng kh√¥ng b·ªã chi ph·ªëi

**L·ªùi khuy√™n**: H√£y tr·ªü th√†nh "c√¥ng d√¢n s·ªë" c√≥ tr√°ch nhi·ªám, kh√¥ng ch·ªâ l√† "ng∆∞·ªùi ti√™u d√πng s·ªë".`;
        }
        
        // Default academic response
        return `C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn nghi√™n c·ª©u v·ªÅ √Ω th·ª©c x√£ h·ªôi trong th·ªùi ƒë·∫°i s·ªë! 

üìö **T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ**:
- **Tri·∫øt h·ªçc**: Nh·∫≠n th·ª©c lu·∫≠n, tri·∫øt h·ªçc x√£ h·ªôi, ƒë·∫°o ƒë·ª©c h·ªçc
- **Ch√≠nh tr·ªã h·ªçc**: Quy·ªÅn l·ª±c, d∆∞ lu·∫≠n, thao t√∫ng th√¥ng tin  
- **X√£ h·ªôi h·ªçc**: Xu h∆∞·ªõng, c·ªông ƒë·ªìng, vƒÉn h√≥a s·ªë
- **Ph∆∞∆°ng ph√°p nghi√™n c·ª©u**: C√°ch ph√¢n t√≠ch v√† ƒë√°nh gi√° th√¥ng tin

üéØ **Ch·ªß ƒë·ªÅ ch√≠nh**: √ù th·ª©c x√£ h·ªôi c√≥ c√≤n ph·∫£n √°nh th·ª±c t·∫°i hay ƒë√£ b·ªã "s·∫£n xu·∫•t" b·ªüi c√°c nh√≥m quy·ªÅn l·ª±c?

H√£y ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ nh·ªØng lƒ©nh v·ª±c n√†y ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t trong vi·ªác h·ªçc t·∫≠p v√† nghi√™n c·ª©u! ü§î`;
    }

    addMessage(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.innerHTML = content.replace(/\n/g, '<br>');
        
        messageDiv.appendChild(contentDiv);
        this.messages?.appendChild(messageDiv);
        
        // Scroll to bottom
        if (this.messages) {
            this.messages.scrollTop = this.messages.scrollHeight;
        }
    }

    showTyping() {
        this.isTyping = true;
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message ai-message typing-indicator';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = `
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        this.messages?.appendChild(typingDiv);
        if (this.messages) {
            this.messages.scrollTop = this.messages.scrollHeight;
        }
    }

    hideTyping() {
        this.isTyping = false;
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    setupAIResponses() {
        // Additional setup if needed
        console.log('Academic AI Chatbox for Social Consciousness initialized');
    }
}

export default ChatboxHandler;